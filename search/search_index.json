{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bristol Flight Lab docs","text":"<p>This site contains general documentation for Bristol Flight Lab.</p> <p>It's hosted on the Flight Lab's GitHub org, and uses MkDocs auto-compiled via a GitHub Action. Flight Lab members can push changes to the docs which will be approved by an owner and published. If you want to trial stuff locally first just clone the repo and do:</p> <pre><code>pip install mkdocs-material mkdocs-implicit-index\nmkdocs serve\n</code></pre> <p>Then open http://127.0.0.1:8000.</p>"},{"location":"#navigation-structure","title":"Navigation structure","text":"<p>This MkDocs is configured to use mkdocs-literate-nav to pull nav and page ordering from a list in index.md within each folder, like this:</p> <ul> <li>Flight controller basics</li> <li>Conventions and standards</li> <li>Example section</li> <li>AVDASI 2</li> </ul>"},{"location":"AVDASI-2/","title":"AVDASI 2 Avionics Guidelines","text":"<p>The goal of this section is to lay out a minimum viable product for the avionics portion of the AVDASI 2 course.</p> <ul> <li>Cube Information</li> <li>Mission Planner</li> <li>PyMAVLink</li> <li>Wifi</li> <li>RC</li> <li>I2C &amp; LUA</li> <li>Data Logging</li> <li>Example Code</li> </ul>"},{"location":"AVDASI-2/Cube-Information/","title":"Cube Information","text":"<p>Basic information about the cube. Say what each in/out does and how to do the initial plug in setup.</p> <p></p> <p>The cube is a very expensive research grade flight computer so please don\u2019t blow it up. </p> <p>Cube User Manual</p> <p>Servo Movement documentation</p> <p>MAVLink common messages</p>"},{"location":"AVDASI-2/Cube-Information/#requirements","title":"Requirements","text":"<p>Year on year the requirements may vary but the basic bits stay the same. Make sure the check the Design Specification and Deliverables documents for specifics.</p> <p>The student-built avionics should be able to:</p> <ul> <li>Move the control surfaces</li> <li>Talk to the cube via Wifi</li> <li>Talk to the cube via Radio</li> <li>Log the generated data</li> <li>Sense flap angle</li> <li>Sense pressure</li> <li>Switch between cube modes and arming states</li> </ul>"},{"location":"AVDASI-2/Cube-Information/#cube-setup","title":"Cube Setup","text":"<p>Plug this here and this there</p>"},{"location":"AVDASI-2/Data-Logging/","title":"Data Logging","text":""},{"location":"AVDASI-2/Data-Logging/#downloading-cube-logs","title":"Downloading Cube logs","text":"<p>The flight controller automatically creates a log of all its sensors (IMUs, temp. sensors, etc.) and its attitude changes during operation into a .bin file. These are necessary to analyse the behaviour of the drone in the wind tunnel and should be downloaded after each test so that the appropriate Teams of the Company can use their data.</p>"},{"location":"AVDASI-2/Data-Logging/#optional-logging-through-lua-scripts","title":"Optional: Logging through LUA scripts","text":"<p>LUA scripts can create and modify files on the Cube\u2019s memory; therefore, it is possible to create logs using LUA scripts (i.e. saving flap angles from the sensor into a CSV). This should only be done for a few sensors only, as it requires a lot of processing power from the flight controller. The example scripts will showcase this as well.</p>"},{"location":"AVDASI-2/Data-Logging/#matlab-data-analysis","title":"MatLab data analysis","text":"<p>Using matlab flight add on</p>"},{"location":"AVDASI-2/Example-code/","title":"Example Code","text":"<p>A series of scripts were written to show a minimum viable ground station. Keep in mind your code will need to be better than this, you can\u2019t just copy it and hope for the best. It does provide a baseline to build off of and an example of how to meet the basic functionality needed.</p> <p>Each script should be able to be executed individually but Main.py allows you to execute them all simultaneously. You don\u2019t need to take your approach in your own GS but this is good since you can debug each function independently.</p>"},{"location":"AVDASI-2/Example-code/#mainpy","title":"Main.py","text":"<p>Links all the scripts together. Call each script as a function after defining them up top.</p> main.py<pre><code>##########################################\n#Main example python script for AVDASI 2 AVIONICS\n#Executes all other example scripts and runs fully functional GCS\n#Author: Ethan Sheehan\n\n#To run this file you need the other example scripts in the same folder and have cube properly set up\n#Potential upgrades:\n    #As you add your own scripts or additionally functions you'll have to ammend them in here\n\n##########################################\n\n#import needed python modules\nimport tkinter as tk #UI module\nimport threading # The threading module allows parts of the program to run concurrently\n\n#Call other example codes\nimport GS_example\nimport Servo_example\nimport UI_example\n\n#Setup function\ndef setup_mav():\n    mav = GS_example.connect_to_cube() #call connection function from GS example\n    if mav is None: #No connection, return None\n        return None, None\n    GS_example.wait_heartbeat(mav) #call the heartbeat function from GS example\n    servo_config = Servo_example.ServoController(mav) #call the servo configuration from Servo example\n    servo_config.write_servo_params() #write the new servo parameters\n    return servo_config, mav\n\n#Main function\ndef main():\n    root = tk.Tk() #Creates the main application window for the UI using Tkinter\n\n    #Set up MAVLINK connection and assign servo config (may be None)\n    servo_config, mav = setup_mav()\n    app = UI_example.ServoUI(root, servo_config)  #Pass servo_config to UI (can be None)\n\n    #Start background listener if connected\n    if mav is not None:\n        threading.Thread(target=GS_example.listen_messages, args=(mav,), daemon=True).start() #listens for defined message from cube\n\n    root.mainloop() #Starts the Tkinter event loop, keeping the window open and responsive\n\n#Independence call\nif __name__ == \"__main__\": #Ensures this script runs only when executed directly, not when imported\n    main() #Calls the main function to start the ground station application\n</code></pre>"},{"location":"AVDASI-2/Example-code/#gs-py","title":"GS.py","text":"<p>This script is what connects the cube to your ground station. It creates the connection, waits for a heartbeat, and after heartbeat is received it listens and prints messages. There\u2019s a wide range of messages and statuses you can listen for from the cube, some more useful than others, so up to you to figure out which ones you want. It also notifies you if the heartbeat is interrupted.</p>"},{"location":"AVDASI-2/Example-code/#arm-py","title":"Arm.py","text":"<p>This script allows you to arm/disarm the cube and toggle its safety switch. Arming allows logging and the safety switch locks all servo movement. </p>"},{"location":"AVDASI-2/Example-code/#servopy","title":"Servo.py","text":"<p>This script actuates the movement of a servo. You\u2019ll have to edit it to allow multiple servos moving simultaneously. </p>"},{"location":"AVDASI-2/Example-code/#uipy","title":"UI.py","text":"<p>This script is a barebones user interface for a GCS. It uses tkinter python module. This was used for its simplicity but you can use whatever module or language you want (there\u2019s some that can make really nice looking UIs). The UI calls functions from the previous arming and servo controller scripts and maps them to buttons. It also allows you to input a specific servo angle and move the servo accordingly.</p>"},{"location":"AVDASI-2/I2C%26LUA/","title":"I2C &amp; LUA","text":"<p>Ardupilot specific LUA documentation: LUA docs</p> <p>Ardupilot scripting support page: Common LUA scripts</p> <p>I2C documentation: I2C-bus specification and user manual</p> <p>This part of the document will provide basic information on how to set up I2C from both the hardware (wiring) and software side (through LUA scripts; see example code for further help).</p>"},{"location":"AVDASI-2/I2C%26LUA/#wiring-of-the-i2c-bus","title":"Wiring of the I2C bus","text":"<p>An I2C serial bus uses two wires (not counting VCC and neutral): SCL \u2013 clock &amp; SDA \u2013 data. Being a multi-master/multi-slave, half-duplex protocol, multiple controllers and devices can be connected to the same bus, but only one can transmit at a time.</p> <p>The wiring of the serial bus itself is straightforward: connect the SCL line to the SCL pins and the SDA line to the SDA pins of all devices on the bus, as seen in Figure 1. It is very important, however, that both the SDA and SCL lines require pull-up resistorsS connected to the logical high voltage of the selected microcontroller that will pull the line high when needed. There is a complex way of sizing the resistance of these resistors with high and low resistances both having pros and cons, but generally 4.7 k\u2126 is perfectly suitable for this kind of application. </p> <p>If the Cube is directly used as the master, then there is no need for dedicated external pull-up resistors as there are built-in ones in the flight controller.</p> <p> Mock-up of an I2C serial bus</p>"},{"location":"AVDASI-2/I2C%26LUA/#enabling-scirpting-on-the-cubepilot","title":"Enabling scirpting on the CubePilot","text":"<p>Before LUA scripts can be executed onboard the flight controller, the scripting feature must be enabled using the parameters of the Cube. Using Mission Planner (or any other similar GS program), locate the <code>SCR_ENABLE</code> parameter and set it to <code>1</code> before rebooting the Cube. A new folder should appear in the <code>APM</code> folder named <code>scripts</code>; if it doesn\u2019t, it needs to be manually created.</p> <p>After this is done, any LUA code uploaded into this folder will be automatically executed when the Cube powered on.</p>"},{"location":"AVDASI-2/I2C%26LUA/#setting-up-and-using-i2c-with-lua-scripts","title":"Setting up and using I2C with LUA scripts","text":"<p>This part tries to explain the basic process of setting up and reading data from an I2C bus. To help understanding, example codes are provided.</p> <p>The first thing that must be done when working with I2C is to take note of the address of the device that is to be used. To set up a device on the I2C bus, LUA\u2019s built-in i2c: module is used. For example, the following line  <pre><code>local sensor = i2c:get_device(bus, ADDR)\n</code></pre> will create a variable named sensor as an I2C device on bus <code>bus</code> (most likely will be <code>0</code> on the Cube) and with I2C address <code>ADDR</code>.</p> <p>To read data from a specific register from a device the <code>&lt;device_var&gt;:read_registers(REG, &lt;int&gt;)</code> syntax can be used. With the above example: <pre><code>sensor:read_registers(REG, 2)\n</code></pre> will read two bytes of data, starting from sensor\u2019s register with address <code>REG</code>.</p> <p>The data read from the registers will come in the shape of an array of bites and need to be broken up into separate binary integers. This is done differently depending on the device\u2019s endianness which must be found from the documentation. Figure 2 helps show the difference between little- and big-endian systems. This only changes the order of the bites transferred but must accounted for to get the data accurately.</p> <p></p> <p>Endianness in a two-byte system</p> <p>The example code will showcase the basic bit operations that will help extract the data from the bit array the data was transmitted in in both big- and little-endian systems. </p>"},{"location":"AVDASI-2/Mission-Planner/","title":"Mission Planner","text":"<p>Most useful bits of it.</p> <p>Mission planner is the software used to communicate and control the cube. Your code should replace Mission Planner and provide the same basic functionality. Mission planner is still useful to use for testing and has numerous vital features.</p> <p>Installation info</p> <p>Mission Planner overview</p>"},{"location":"AVDASI-2/Mission-Planner/#connecting","title":"Connecting","text":"<p>Mission Planner can be connected to the Cube over Wifi and USB. If connecting through USB, make sure to use the buzzer; do not plug the cable directly into the Cube. In mission planner, on the top right of the window, you will see two selection boxes and a <code>Connect</code> button. If you know which <code>COM</code> terminal you plugged the USB into, select it, but there is an <code>AUTO</code> function too. Wait until the buzzer buzzes before clicking connect.</p> <p></p> <p>Using the Wifi module is a bit different but simple. After setting up the Wifi chip (for more information see Wifi), connect the chip to the Cube\u2019s <code>Telem1/Telem2</code> port and your computer to the Wifi network. Select the <code>UDP</code> setting and hit connect.</p>"},{"location":"AVDASI-2/Mission-Planner/#parameters","title":"Parameters","text":"<p>When first connecting to the cube, there are a few parameters that need changing. In Mission Planner, a parameter is a configurable setting that tells the flight controller (like the Cube) how to behave. Parameters control everything from flight modes, sensor settings, failsafes, and PID tuning, to things like which servo does what and how fast a drone should climb or descend.</p> <p>To access parameters, go to config and then full parameter list. This opens up every single parameters available for you to change. Scroll or search for <code>NFT_BUZZ_VOLUME</code> and turn it down so the cube doesn\u2019t scream at you every time you turn it on. Then click <code>write params</code> and congratulations you\u2019ve changed the cube settings. Don\u2019t forget to save your parameters every so often so you don\u2019t lose them.</p>"},{"location":"AVDASI-2/Mission-Planner/#servoactions","title":"Servo/Actions","text":"<p><code>Ctrl F</code> opens up some sort of settings thing. Click <code>toggle servo safety</code> to turn off safety. In <code>Actions</code> there\u2019s the arm button.</p>"},{"location":"AVDASI-2/PyMavlink/","title":"PyMAVLink","text":"<p>The cube uses MAVLink, a lightweight communication protocol to receive commands and transmit data to and from the Ground Station. Python has a MAVLink module called Pymavlink that will allow to send and capture MAVLink messages.</p> <p>To be able to do so, first the code must connect to the Cube through MAVLink (see Cube Information for how to physically connect to the Cube). An example code will be provided to show a baseline for how to connect to the flight controller with python. (See GS.py)</p> <p>Another example code will show how to send commands over MAVLink (in particular, arming the Cube see Arm.py). Use this to develop your code.</p> <p>Sending Commands using MAVLINK: Use the <code>command_long_send</code> function of the mavlink library to send control demands to the cube.</p> <p>This command takes 7 parameters:  <pre><code>(target_system, target_component, command, confirmation, param1 - 7)\n</code></pre></p>"},{"location":"AVDASI-2/RC/","title":"RC","text":"<p>Radio controller</p>"},{"location":"AVDASI-2/Wifi/","title":"Wifi","text":"<p>How to set up the Wifi chip: ESP8266 Ardupilot guide</p> <p>(Note: you should not need to flash the chip, just set a name and password)</p> <p>Wifi chip documentation: Adafruit HUZZAH ESP8266 breakout doc</p>"},{"location":"conventions/","title":"Lab standards and conventions","text":"<ul> <li>RC safety switches and failsafes</li> </ul>"},{"location":"conventions/switches/","title":"RC safety switch configuration","text":"<p>All Flight Lab flights should have the below switch configuration unless good reason to do otherwise. If any other configuration is used, clear briefing should be given to flight team (actually, clear briefing even if this configuration is used!).</p> <ul> <li>flight mode - top left (swA on Taranis), up (away from pilot/towards rear of controller) = most manual, further down = more automatic</li> <li>RTL - top second-left (swB on Taranis), down = initiate RTL</li> <li>kill - top right (swD on Taranis), down = kill motors and anything else</li> </ul>"},{"location":"example-section/","title":"Example section","text":"<p>Here's some example docs.</p> <p>This MkDocs is configured to use mkdocs-literate-nav to pull nav and page ordering from a list in index.md within each folder.</p> <ul> <li>First page</li> <li>Second page</li> <li>A third page not in alphabetical order</li> </ul>"},{"location":"example-section/first-page/","title":"First page","text":"<p>The page title is pulled from the first level 1 header. If that doesn't exist then it uses the file name.</p>"},{"location":"example-section/first-page/#section-header","title":"Section header","text":"<p>Sections and subsections are integrated into the nav too.</p>"},{"location":"example-section/first-page/#another-section-header","title":"Another section header","text":"<p>This is fun.</p>"},{"location":"example-section/second-page/","title":"Ooh a second page","text":"<p>Some text on the second page</p>"},{"location":"flight-controller-basics/","title":"Flight controller basics","text":"<p>The Flight Lab's standard control setup uses CubePilot hardware running Ardupilot.</p> <p>Expand, adding some stuff about basic platforms, links to quickstart guides, etc.</p> <p>Maybe also HereLink, standard recommended cameras, other stuff?</p>"}]}